{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pSX5AWRlCe3M",
        "outputId": "586bb087-3751-42f8-84e0-7bacfcf953a1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "File loaded successfully!\n",
            "Generating Correlation Heatmap...\n",
            "Saved '1_sensor_correlation_heatmap.png'\n",
            "Generating Pair Plot...\n",
            "Saved '2_sensor_pairplot.png'\n",
            "Applying K-Means Clustering...\n",
            "Visualizing Clusters...\n",
            "Saved '3_kmeans_clusters_visualization.png'\n",
            "\n",
            "Analysis complete! Check the folder for your saved images.\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# --- Step 1: Load and Prepare the Data ---\n",
        "try:\n",
        "    # Make sure your CSV file is in the same directory as this script\n",
        "    df = pd.read_csv('Untitled spreadsheet - Sheet1.csv')\n",
        "    print(\"File loaded successfully!\")\n",
        "except FileNotFoundError:\n",
        "    print(\"Error: 'Untitled spreadsheet - Sheet1.csv' not found.\")\n",
        "    print(\"Please make sure the CSV file is in the same folder as this Python script.\")\n",
        "    exit()\n",
        "\n",
        "# Convert Timestamp column to a datetime object for potential time-series analysis\n",
        "df['Timestamp'] = pd.to_datetime(df['Timestamp'])\n",
        "\n",
        "# Select only the numerical columns for ML analysis\n",
        "numerical_df = df.select_dtypes(include=['number'])\n",
        "\n",
        "# --- Step 2: Generate a Correlation Heatmap ---\n",
        "print(\"Generating Correlation Heatmap...\")\n",
        "plt.figure(figsize=(10, 7))\n",
        "correlation_matrix = numerical_df.corr()\n",
        "sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f')\n",
        "plt.title('Correlation Heatmap of Sensor Data')\n",
        "plt.tight_layout()\n",
        "plt.savefig('1_sensor_correlation_heatmap.png')\n",
        "plt.close()\n",
        "print(\"Saved '1_sensor_correlation_heatmap.png'\")\n",
        "\n",
        "\n",
        "# --- Step 3: Generate a Pair Plot ---\n",
        "print(\"Generating Pair Plot...\")\n",
        "# We use a subset of columns for readability\n",
        "pairplot_cols = ['Temperature', 'Humidity', 'Soil_Moisture', 'Light_Level', 'CO2_PPM']\n",
        "pair_plot = sns.pairplot(df[pairplot_cols])\n",
        "pair_plot.fig.suptitle('Pair Plot of Sensor Data', y=1.02) # Adjust title position\n",
        "plt.savefig('2_sensor_pairplot.png')\n",
        "plt.close()\n",
        "print(\"Saved '2_sensor_pairplot.png'\")\n",
        "\n",
        "\n",
        "# --- Step 4: Apply K-Means Clustering ---\n",
        "print(\"Applying K-Means Clustering...\")\n",
        "# Scale data for better performance with distance-based algorithms like K-Means\n",
        "scaler = StandardScaler()\n",
        "scaled_features = scaler.fit_transform(numerical_df)\n",
        "\n",
        "# We will use 3 clusters, which is a common starting point for environmental data\n",
        "# (e.g., morning, afternoon, night)\n",
        "optimal_k = 3\n",
        "kmeans = KMeans(n_clusters=optimal_k, random_state=42, n_init=10)\n",
        "df['Cluster'] = kmeans.fit_predict(scaled_features)\n",
        "\n",
        "# Visualize the clusters\n",
        "print(\"Visualizing Clusters...\")\n",
        "plt.figure(figsize=(12, 8))\n",
        "sns.scatterplot(data=df, x='Temperature', y='CO2_PPM', hue='Cluster', palette='viridis', s=100, alpha=0.8)\n",
        "plt.title('K-Means Clustering of Sensor Data (Temperature vs. CO2 PPM)')\n",
        "plt.xlabel('Temperature (Â°C)')\n",
        "plt.ylabel('CO2 (PPM)')\n",
        "plt.legend(title='Cluster')\n",
        "plt.grid(True)\n",
        "plt.tight_layout()\n",
        "plt.savefig('3_kmeans_clusters_visualization.png')\n",
        "plt.close()\n",
        "print(\"Saved '3_kmeans_clusters_visualization.png'\")\n",
        "print(\"\\nAnalysis complete! Check the folder for your saved images.\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.ensemble import IsolationForest\n",
        "\n",
        "# --- Step 1: Load and Prepare the Data ---\n",
        "try:\n",
        "    df = pd.read_csv('Untitled spreadsheet - Sheet1.csv')\n",
        "    print(\"File loaded successfully!\")\n",
        "except FileNotFoundError:\n",
        "    print(\"Error: 'Untitled spreadsheet - Sheet1.csv' not found.\")\n",
        "    exit()\n",
        "\n",
        "# We need the timestamp for visualization\n",
        "df['Timestamp'] = pd.to_datetime(df['Timestamp'])\n",
        "\n",
        "# Select the sensor features for the model\n",
        "features = ['Temperature', 'Humidity', 'Soil_Moisture', 'Light_Level', 'CO2_PPM']\n",
        "X = df[features]\n",
        "\n",
        "# --- Step 2: Train the Anomaly Detection Model ---\n",
        "print(\"\\nTraining the Isolation Forest model...\")\n",
        "# The 'contamination' parameter is an estimate of the percentage of anomalies in the data.\n",
        "# Let's start by assuming about 1% of the data could be anomalous.\n",
        "model = IsolationForest(contamination=0.01, random_state=42)\n",
        "\n",
        "# Fit the model and get the predictions\n",
        "# The model returns +1 for normal points and -1 for anomalies\n",
        "df['anomaly'] = model.fit_predict(X)\n",
        "print(\"Model training and prediction complete!\")\n",
        "\n",
        "# --- Step 3: Analyze and Visualize the Anomalies ---\n",
        "# Filter out the anomalous data points to inspect them\n",
        "anomalies = df[df['anomaly'] == -1]\n",
        "\n",
        "print(f\"\\nFound {len(anomalies)} potential anomalies.\")\n",
        "if not anomalies.empty:\n",
        "    print(\"\\nHere are the detected anomalies:\")\n",
        "    # We display the anomalous data points\n",
        "    print(anomalies[['Timestamp'] + features])\n",
        "\n",
        "# Visualize the anomalies\n",
        "print(\"\\nGenerating anomaly visualization...\")\n",
        "plt.figure(figsize=(15, 7))\n",
        "\n",
        "# Plot the soil moisture over time\n",
        "plt.plot(df['Timestamp'], df['Soil_Moisture'], color='blue', label='Normal Soil Moisture')\n",
        "\n",
        "# Highlight the anomalies on the plot\n",
        "plt.scatter(anomalies['Timestamp'], anomalies['Soil_Moisture'], color='red', marker='x', s=100, label='Detected Anomaly')\n",
        "\n",
        "plt.title('Anomaly Detection in Soil Moisture')\n",
        "plt.xlabel('Timestamp')\n",
        "plt.ylabel('Soil Moisture Reading')\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.savefig('5_anomaly_detection_plot.png')\n",
        "plt.close()\n",
        "print(\"Saved '5_anomaly_detection_plot.png'\")\n",
        "print(\"\\nAnalysis complete!\")"
      ],
      "metadata": {
        "id": "PmWXfOSKDW9m",
        "outputId": "b4dc1250-00a2-4a02-eb78-95701bff5b9a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "File loaded successfully!\n",
            "\n",
            "Training the Isolation Forest model...\n",
            "Model training and prediction complete!\n",
            "\n",
            "Found 4 potential anomalies.\n",
            "\n",
            "Here are the detected anomalies:\n",
            "              Timestamp  Temperature  Humidity  Soil_Moisture  Light_Level  \\\n",
            "0   2025-09-14 12:37:55         28.9        92             58           44   \n",
            "1   2025-09-14 14:15:46         28.5        93             63           42   \n",
            "2   2025-09-14 14:30:45         28.5        92             66           32   \n",
            "355 2025-09-18 14:17:09         30.8        80             54           34   \n",
            "\n",
            "     CO2_PPM  \n",
            "0    3992.81  \n",
            "1    4706.54  \n",
            "2    4431.07  \n",
            "355  2336.72  \n",
            "\n",
            "Generating anomaly visualization...\n",
            "Saved '5_anomaly_detection_plot.png'\n",
            "\n",
            "Analysis complete!\n"
          ]
        }
      ]
    }
  ]
}